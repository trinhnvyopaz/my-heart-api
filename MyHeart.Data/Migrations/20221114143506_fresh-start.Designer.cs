// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyHeart.Data;

namespace MyHeart.Data.Migrations
{
    [DbContext(typeof(MyHeartContext))]
    [Migration("20221114143506_fresh-start")]
    partial class freshstart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyHeart.Data.Models.Client_Disease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiseaseId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("Client_Disease");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Client_Document", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId1")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientId1");

                    b.ToTable("Client_Document");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Client_QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("Client_QuestionaireId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<int>("SymptomQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Client_QuestionaireId");

                    b.HasIndex("SymptomQuestionId");

                    b.ToTable("Client_QuestionAnswers");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Client_Questionaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Client_Questionaire");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Client_Therapy", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PharmacyId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("Client_Therapy");
                });

            modelBuilder.Entity("MyHeart.Data.Models.CommercialName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CommercialName");
                });

            modelBuilder.Entity("MyHeart.Data.Models.CommercialName_Pharmacy", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("CommercialNamesId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("PharmacyId", "CommercialNamesId");

                    b.HasIndex("CommercialNamesId");

                    b.ToTable("CommercialName_Pharmacy");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Frequency")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemicMeasures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TargetDiastolicPressure")
                        .HasColumnType("int");

                    b.Property<int>("TargetHeartRate")
                        .HasColumnType("int");

                    b.Property<double>("TargetLdl")
                        .HasColumnType("float");

                    b.Property<int>("TargetSystolicPressure")
                        .HasColumnType("int");

                    b.Property<double>("TargetWeight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Disease");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease_Disease_Causes", b =>
                {
                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("CauseId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("DiseaseId", "CauseId");

                    b.ToTable("Disease_Disease_Causes");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease_MedicamentGroup_MedicamentGroup", b =>
                {
                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("DiseaseId", "MedicamentGroupId");

                    b.HasIndex("MedicamentGroupId");

                    b.ToTable("Disease_MedicamentGroup_MedicamentGroup");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease_NonpharmaticTherapy_NonpharmaticTherapy", b =>
                {
                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("NonpharmaticTherapyId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("DiseaseId", "NonpharmaticTherapyId");

                    b.HasIndex("NonpharmaticTherapyId");

                    b.ToTable("Disease_NonpharmaticTherapy_NonpharmaticTherapy");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease_PreventiveMeasures_PreventiveMeasures", b =>
                {
                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("PreventiveMeasuresId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("DiseaseId", "PreventiveMeasuresId");

                    b.HasIndex("PreventiveMeasuresId");

                    b.ToTable("Disease_PreventiveMeasures_PreventiveMeasures");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease_Symptoms_Symptoms", b =>
                {
                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomsId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("DiseaseId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("Disease_Symptoms_Symptoms");
                });

            modelBuilder.Entity("MyHeart.Data.Models.DoctorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WorkPlace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DoctorDetails");
                });

            modelBuilder.Entity("MyHeart.Data.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("MyHeart.Data.Models.HospitalizationLength", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("length")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HospitalizationLengths");
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicalFacilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdministrativeDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CareField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CareForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CareType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharacterSecondary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityTypeCode")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ICO")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Municipality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PCDP")
                        .HasColumnType("int");

                    b.Property<int>("PCZ")
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicalFacilities");
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicalFacilities_PreventiveMeasures_Preventive", b =>
                {
                    b.Property<int>("MedicalFacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("PreventiveMeasureId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("MedicalFacilitiesId", "PreventiveMeasureId");

                    b.HasIndex("PreventiveMeasureId");

                    b.ToTable("MedicalFacilities_PreventiveMeasures_Preventive");
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicamentGroup");
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup_Disease_Contraindication", b =>
                {
                    b.Property<int>("MedicamentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("MedicamentGroupId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("MedicamentGroup_Disease_Contraindication");
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup_Disease_Indication", b =>
                {
                    b.Property<int>("MedicamentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("MedicamentGroupId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("MedicamentGroup_Disease_Indication");
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup_Pharmacy_ActiveSubstance", b =>
                {
                    b.Property<int>("MedicamentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("MedicamentGroupId", "PharmacyId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("MedicamentGroup_Pharmacy_ActiveSubstance");
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup_Pharmacy_Discard", b =>
                {
                    b.Property<int>("MedicamentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("MedicamentGroupId", "PharmacyId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("MedicamentGroup_Pharmacy_Discard");
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup_Symptoms_SideEffects", b =>
                {
                    b.Property<int>("MedicamentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomsId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("MedicamentGroupId", "SymptomsId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("MedicamentGroup_Symptoms_SideEffects");
                });

            modelBuilder.Entity("MyHeart.Data.Models.NonpharmaticTherapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Efficiency")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<string>("HospitalizationLength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NonpharmaticTherapy");
                });

            modelBuilder.Entity("MyHeart.Data.Models.NonpharmaticTherapy_Disease_Contraindication", b =>
                {
                    b.Property<int>("NonpharmaticTherapyId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("NonpharmaticTherapyId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("NonpharmaticTherapy_Disease_Contraindication");
                });

            modelBuilder.Entity("MyHeart.Data.Models.NonpharmaticTherapy_Disease_Indication", b =>
                {
                    b.Property<int>("NonpharmaticTherapyId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("NonpharmaticTherapyId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("NonpharmaticTherapy_Disease_Indication");
                });

            modelBuilder.Entity("MyHeart.Data.Models.NonpharmaticTherapy_MedicalFacilities_MedicalIntervention", b =>
                {
                    b.Property<int>("NonpharmaticTherapyId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalFacilitiesId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("NonpharmaticTherapyId", "MedicalFacilitiesId");

                    b.HasIndex("MedicalFacilitiesId");

                    b.ToTable("NonpharmaticTherapy_MedicalFacilities_MedicalIntervention");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MyHeart.Data.Models.PasswordResetTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TokenUsed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PasswordResetTickets");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AtcWho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DddamntWho")
                        .HasColumnType("float");

                    b.Property<string>("DddunWho")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Form")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("MaximumDose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimumDose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameReg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Package")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuklCode")
                        .HasColumnType("int");

                    b.Property<string>("Supplement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Pharmacy_CommercialNames", b =>
                {
                    b.Property<int>("PharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<int>("MedicamentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PharmacyId");

                    b.HasIndex("MedicamentGroupId");

                    b.ToTable("Pharmacy_CommercialNames");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Pharmacy_Disease_ContraIndication", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("PharmacyId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("Pharmacy_Disease_ContraIndication");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Pharmacy_Disease_Indication", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("PharmacyId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("Pharmacy_Disease_Indication");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Pharmacy_Symptoms_SideEffects", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<int?>("SymptomsId")
                        .HasColumnType("int");

                    b.HasKey("PharmacyId", "SymptomId");

                    b.HasIndex("SymptomsId");

                    b.ToTable("Pharmacy_Symptoms_SideEffects");
                });

            modelBuilder.Entity("MyHeart.Data.Models.PreventiveMeasures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PreventiveMeasures");
                });

            modelBuilder.Entity("MyHeart.Data.Models.ProfessionInformation.Atc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AtcCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("NT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Atc");
                });

            modelBuilder.Entity("MyHeart.Data.Models.ProfessionInformation.MedicamentGroup_Atc", b =>
                {
                    b.Property<int>("MedicamentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("AtcId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("MedicamentGroupId", "AtcId");

                    b.HasIndex("AtcId");

                    b.ToTable("MedicamentGroup_Atc");
                });

            modelBuilder.Entity("MyHeart.Data.Models.ProfessionInformation.Pil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<bool>("OnWeb")
                        .HasColumnType("bit");

                    b.Property<int>("SuklCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pils");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MyHeart.Data.Models.QuestionComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionComments");
                });

            modelBuilder.Entity("MyHeart.Data.Models.SymptomQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SymptomQuestions");
                });

            modelBuilder.Entity("MyHeart.Data.Models.SymptomQuestions_Disease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomsQuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("DiseaseId", "SymptomsQuestionsId");

                    b.HasIndex("SymptomsQuestionsId");

                    b.ToTable("SymptomQuestions_Disease");
                });

            modelBuilder.Entity("MyHeart.Data.Models.SymptomQuestions_Symptom", b =>
                {
                    b.Property<int>("SymptomsId")
                        .HasColumnType("int");

                    b.Property<int>("SymptomQuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("BondStrength")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("SymptomsId", "SymptomQuestionsId");

                    b.HasIndex("SymptomQuestionsId")
                        .IsUnique();

                    b.ToTable("SymptomQuestions_Symptom");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Symptoms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("MyHeart.Data.Models.TherapyNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TherapyNews");
                });

            modelBuilder.Entity("MyHeart.Data.Models.TherapyNews_Disease_Sick", b =>
                {
                    b.Property<int>("TherapyNewsId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("TherapyNewsId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("TherapyNews_Disease_Sick");
                });

            modelBuilder.Entity("MyHeart.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailComfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<bool>("MFAConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("MFARecovery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MFASecret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MFATimeSlice")
                        .HasColumnType("bigint");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReplyEmailNotification")
                        .HasColumnType("bit");

                    b.Property<string>("SMSMFA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionPreferences")
                        .HasColumnType("int");

                    b.Property<bool>("TherapyNewsEmailNotification")
                        .HasColumnType("bit");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "info@memos.cz",
                            EmailComfirmed = false,
                            FirstName = "Memos",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastName = "Memos",
                            LastUpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MFAConfirmed = false,
                            MFATimeSlice = 0L,
                            PasswordHash = "Qz0BICLJeokFZ5xZVcz4ZxtvFs/xvCYxp/+2yZKSBjfKVER7",
                            ReplyEmailNotification = false,
                            SubscriptionPreferences = 0,
                            TherapyNewsEmailNotification = false,
                            UserType = 0
                        });
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserAnamnesis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAbususAnamnesis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbusus_Alcohol")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbusus_Exsmoker")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbusus_Smoker")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAllergyAnamnesis")
                        .HasColumnType("bit");

                    b.Property<string>("IsAllergy_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFamilyAnamnesis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamily_AtrialFibrillation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamily_HeartAttack")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamily_ICHS")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamily_Pacemaker")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamily_SuddenDeath")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFamily_ValveDefect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGeneralAnamnesis")
                        .HasColumnType("bit");

                    b.Property<int>("IsGeneral_PhysicalActivityFrequencyType")
                        .HasColumnType("int");

                    b.Property<bool>("IsPersonalAnamnesis")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsPersonal_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsPersonal_DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("IsPersonal_NonpharmaticId")
                        .HasColumnType("int");

                    b.Property<int>("IsPersonal_Type")
                        .HasColumnType("int");

                    b.Property<string>("IsPersonal_Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPharmacyAnamnesis")
                        .HasColumnType("bit");

                    b.Property<string>("IsPharmacy_AfternoonDose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsPharmacy_BoldStr")
                        .HasColumnType("int");

                    b.Property<string>("IsPharmacy_Dose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsPharmacy_EveningDose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsPharmacy_MorningDose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsPharmacy_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsPharmacy_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsPharmacy_PharmacyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSocialAnamnesis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocial_DisabilityPension")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocial_LivingWithPartner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocial_PartialDisabilityPension")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocial_Pension")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSocial_Working")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnamnesis");
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceCompanyCode")
                        .HasColumnType("int");

                    b.Property<int>("InsuranceNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsSubscription")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetail");
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartDateString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDiseases");
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserNonpharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<int>("NonpharmaticTherapyId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NonpharmaticTherapyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNonpharmacy");
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserPersonalDisease", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("UserId", "Name");

                    b.ToTable("UserPersonalDisease");
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserPersonalNonpharmaceutical", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("UserId", "Name");

                    b.ToTable("UserPersonalNonpharmaceutical");
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserPharmacy", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dosing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.HasKey("UserId", "Name");

                    b.ToTable("UserPharmacy");
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserPhoneAuthRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorisedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<Guid>("LoginSecret")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PhoneAuthorized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PhoneAuth");
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserReport");
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserReportFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserReportId");

                    b.ToTable("UserReportFile");
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserTrustedLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<Guid>("SharedSecret")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TrustedLogins");
                });

            modelBuilder.Entity("MyHeart.Data.Models.VideoRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUser")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("UNDEFINED");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("VideoRooms");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Client_Disease", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", "Client")
                        .WithMany("DiagnosedDiseases")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Client_Document", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Client_QuestionAnswer", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Client_Questionaire", "Client_Questionaire")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("Client_QuestionaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.SymptomQuestions", "SymptomQuestion")
                        .WithMany()
                        .HasForeignKey("SymptomQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Client_Questionaire", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Client_Therapy", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.CommercialName_Pharmacy", b =>
                {
                    b.HasOne("MyHeart.Data.Models.CommercialName", "CommercialNames")
                        .WithMany("Pharmacy")
                        .HasForeignKey("CommercialNamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease_Disease_Causes", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany("Causes")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease_MedicamentGroup_MedicamentGroup", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany("MedicamentGroup")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.MedicamentGroup", "MedicamentGroup")
                        .WithMany()
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease_NonpharmaticTherapy_NonpharmaticTherapy", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany("NonpharmaticTherapy")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.NonpharmaticTherapy", "NonpharmaticTherapy")
                        .WithMany()
                        .HasForeignKey("NonpharmaticTherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease_PreventiveMeasures_PreventiveMeasures", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany("PreventiveMeasures")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.PreventiveMeasures", "PreventiveMeasures")
                        .WithMany("Indication")
                        .HasForeignKey("PreventiveMeasuresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Disease_Symptoms_Symptoms", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany("Symptoms")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Symptoms", "Symptoms")
                        .WithMany("Diseases")
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.DoctorDetail", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", null)
                        .WithOne("DoctorDetail")
                        .HasForeignKey("MyHeart.Data.Models.DoctorDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicalFacilities_PreventiveMeasures_Preventive", b =>
                {
                    b.HasOne("MyHeart.Data.Models.MedicalFacilities", "MedicalFacilities")
                        .WithMany("PreventiveMeasures")
                        .HasForeignKey("MedicalFacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.PreventiveMeasures", "PreventiveMeasure")
                        .WithMany("WorkspaceList")
                        .HasForeignKey("PreventiveMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup_Disease_Contraindication", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Contraindication")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.MedicamentGroup", "MedicamentGroup")
                        .WithMany("Contraindication")
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup_Disease_Indication", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Indication")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.MedicamentGroup", "MedicamentGroup")
                        .WithMany("Indication")
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup_Pharmacy_ActiveSubstance", b =>
                {
                    b.HasOne("MyHeart.Data.Models.MedicamentGroup", "MedicamentGroup")
                        .WithMany("ActiveSubstance")
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Pharmacy", "Pharmacy")
                        .WithMany("ActiveSubstance")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup_Pharmacy_Discard", b =>
                {
                    b.HasOne("MyHeart.Data.Models.MedicamentGroup", "MedicamentGroup")
                        .WithMany("DiscardedPharmacies")
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Pharmacy", "Pharmacy")
                        .WithMany("Discards")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.MedicamentGroup_Symptoms_SideEffects", b =>
                {
                    b.HasOne("MyHeart.Data.Models.MedicamentGroup", "MedicamentGroup")
                        .WithMany("SideEffects")
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Symptoms", "Symptoms")
                        .WithMany()
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.NonpharmaticTherapy_Disease_Contraindication", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.NonpharmaticTherapy", "NonpharmaticTherapy")
                        .WithMany("Complication")
                        .HasForeignKey("NonpharmaticTherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.NonpharmaticTherapy_Disease_Indication", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.NonpharmaticTherapy", "NonpharmaticTherapy")
                        .WithMany("Indication")
                        .HasForeignKey("NonpharmaticTherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.NonpharmaticTherapy_MedicalFacilities_MedicalIntervention", b =>
                {
                    b.HasOne("MyHeart.Data.Models.MedicalFacilities", "MedicalFacilities")
                        .WithMany("NonpharmaticTherapy")
                        .HasForeignKey("MedicalFacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.NonpharmaticTherapy", "NonpharmaticTherapy")
                        .WithMany("MedicalIntervention")
                        .HasForeignKey("NonpharmaticTherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Notification", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany("Notifications")
                        .HasForeignKey("DiseaseId");
                });

            modelBuilder.Entity("MyHeart.Data.Models.Pharmacy_CommercialNames", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Pharmacy", "MedicamentGroup")
                        .WithMany("CommercialNames")
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Pharmacy_Disease_ContraIndication", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Contraindication")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Pharmacy", "Pharmacy")
                        .WithMany("ContraIndication")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Pharmacy_Disease_Indication", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Indication")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Pharmacy", "Pharmacy")
                        .WithMany("Indication")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Pharmacy_Symptoms_SideEffects", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Pharmacy", "Pharmacy")
                        .WithMany("SideEffects")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Symptoms", "Symptoms")
                        .WithMany()
                        .HasForeignKey("SymptomsId");
                });

            modelBuilder.Entity("MyHeart.Data.Models.ProfessionInformation.MedicamentGroup_Atc", b =>
                {
                    b.HasOne("MyHeart.Data.Models.ProfessionInformation.Atc", "Atc")
                        .WithMany("MedicamentGroups")
                        .HasForeignKey("AtcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.MedicamentGroup", "MedicamentGroup")
                        .WithMany("Atcs")
                        .HasForeignKey("MedicamentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.Question", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.QuestionComment", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Question", null)
                        .WithMany("Comments")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.SymptomQuestions_Disease", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany("SymptomQuestions")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.SymptomQuestions", "DiseaseQuestions")
                        .WithMany("Diseases")
                        .HasForeignKey("SymptomsQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.SymptomQuestions_Symptom", b =>
                {
                    b.HasOne("MyHeart.Data.Models.SymptomQuestions", "DiseaseQuestions")
                        .WithOne("Symptom")
                        .HasForeignKey("MyHeart.Data.Models.SymptomQuestions_Symptom", "SymptomQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.Symptoms", "Symptoms")
                        .WithMany("SymptomQuestions")
                        .HasForeignKey("SymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.TherapyNews_Disease_Sick", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.TherapyNews", "TherapyNews")
                        .WithMany("Diseases")
                        .HasForeignKey("TherapyNewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserAnamnesis", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", "User")
                        .WithMany("UserAnamnesis")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserDetail", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", null)
                        .WithOne("UserDetail")
                        .HasForeignKey("MyHeart.Data.Models.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserDisease", b =>
                {
                    b.HasOne("MyHeart.Data.Models.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserNonpharmacy", b =>
                {
                    b.HasOne("MyHeart.Data.Models.NonpharmaticTherapy", "NonpharmaticTherapy")
                        .WithMany("UserNonpharmacy")
                        .HasForeignKey("NonpharmaticTherapyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHeart.Data.Models.User", "User")
                        .WithMany("UserNonpharmacy")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserPersonalDisease", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", null)
                        .WithMany("PersonalDisease")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserPersonalNonpharmaceutical", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", null)
                        .WithMany("PersonalNonpharmaceutical")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserReport", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", "User")
                        .WithMany("UserReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserReportFile", b =>
                {
                    b.HasOne("MyHeart.Data.Models.UserReport", "UserReport")
                        .WithMany("UserReportFiles")
                        .HasForeignKey("UserReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHeart.Data.Models.UserTrustedLogin", b =>
                {
                    b.HasOne("MyHeart.Data.Models.User", "User")
                        .WithMany("TrustedLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
